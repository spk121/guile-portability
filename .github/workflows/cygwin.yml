name: Cygwin - Guile Build & Check

on:
  # Trigger on push to main branch and pull requests
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Install Git
      run: |
        choco install git
          
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: true
        token: ${{ secrets.PAT_TOKEN }} # Need a token so I can push to submodule repo

    - name: Configure git bot account
      run: |
        # Configure git
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
      shell: pwsh

    - name: Cache Cygwin Packages
      id: cache-cygwin
      uses: actions/cache@v4
      with:
        path: C:\cygwin
        key: cygwin-${{ hashFiles('.github/workflows/cygwin.yml') }}

    - name: Install cygwin
      if: steps.cache-cygwin.outputs.cache-hit != 'true'
      uses: cygwin/cygwin-install-action@master
      with:
        packages: >-
          autoconf automake make libtool flex gperf
          gcc-core
          lzip xz
          gettext-devel libffi-devel libgc-devel
          libgmp-devel libreadline-devel libunistring-devel
          libiconv-devel
          texinfo texinfo-tex texlive

    # Need be at the HEAD of the badges repo so we can commit to it later.
    # Otherwise, the submodule would be in detached head state.
    - name: Update Submodule to HEAD
      run: |
        Set-Location -Path badges  # Enter the submodule directory
        git checkout master
        git pull origin master
        Set-Location -Path ..
      shell: pwsh

    # This uses Cygwin's bash
    - name: Configure
      run: |
        export LANG=C.UTF-8
        export TERM=dumb
        export VERBOSE=true
        export TZ=America/Los_Angeles
        export TOP="$(pwd)"
        set -e  # Exit on any error
        mkdir -p "$(pwd)/app" && \
        cd guile && \
        ./autogen.sh && \
          ./configure CFLAGS="-g -O2 -Wall" --disable-lto --prefix="$(pwd)/app"
      shell: C:\cygwin\bin\bash.exe -o igncr '{0}'

    # This uses Cygwin's bash
    - name: Build
      id: build
      run: |
        cd guile && \
        make -j4 V=1
      shell: C:\cygwin\bin\bash.exe -o igncr '{0}'
      continue-on-error: true  # Need to continue to make a build failure badge

    - name: Handle Build Outcome
      run: |
        # Create the badge directory
        $BADGEDIR = "./badges/${{ github.repository }}/${{ github.ref_name }}/"
        New-Item -Path $BADGEDIR -ItemType Directory -Force
    
        # Generate badge based on build outcome
        if ("${{ steps.build.outcome }}" -eq "success") {
          Basic-Badge.ps1 'Cygwin' 'success' 'green' | Out-File -FilePath "tmp.svg" -Encoding utf8
          $COMMIT_MSG = "Update Cygwin badge to success"
        } else {
          Basic-Badge.ps1 'Cygwin' 'failure' 'red' | Out-File -FilePath "tmp.svg" -Encoding utf8
          $COMMIT_MSG = "Update Cygwin badge to failure"
        }
        Update-Repo.ps1 $BADGEDIR "cygwin.svg" "tmp.svg" $COMMIT_MSG
    
        # Exit with failure if build failed
        if ("${{ steps.build.outcome }}" -ne "success") {
          exit 1
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PATH: "${{ github.workspace }}/verbose-waffle/scripts;$PATH"
      shell: pwsh

    # This uses Cygwin's bash
    - name: Run Unit Tests
      id: check
      run: |
        cd guile && \
        make check V=1
      shell: C:\cygwin\bin\bash.exe -o igncr '{0}'
      continue-on-error: true

    - name: Short report of unit tests
      run: |
        $BADGEDIR = "./badges/${{ github.repository }}/${{ github.ref_name }}/"
        if (Test-Path -Path "guile/check-guile.log") {
          $logContent = Get-Content -Path "guile/check-guile.log" -Raw
          $logContent = $logContent -replace "`0", ""
          $totalsSection = $logContent | Select-String -Pattern "Totals for this test run" -Context 0,10
          if ($totalsSection) {
            $totalsText = $totalsSection.Line + "`n" + ($totalsSection.Context.PostContext -join "`n")
            $totalsText | Text-To-SVG.ps1 | Out-File -FilePath "tmp.svg" -Encoding utf8
          } else {
            "Test totals section not found in log" | Text-To-SVG.ps1 | Out-File -FilePath "tmp.svg" -Encoding utf8
          }
        } else {
          "Complete test failure" | Text-To-SVG.ps1 | Out-File -FilePath "tmp.svg" -Encoding utf8
        }
        Update-Repo.ps1 $BADGEDIR "cygwin-check.svg" "tmp.svg" "Update Cygwin with check results"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PATH: "${{ github.workspace }}/verbose-waffle/scripts;$PATH"
      shell: pwsh

    - name: Archive Test Logs
      if: always() && steps.check.outcome != 'skipped'
      uses: actions/upload-artifact@v4
      with:
        name: Test-Logs-${{ github.sha }}
        path: ./guile/*.log
        if-no-files-found: warn

    - name: Late Quit
      if: ${{ steps.check.outcome != 'success' }}
      run: exit 1
