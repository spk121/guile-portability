name: Guile Build & Test on Cygwin

on:
  # Trigger on push to main branch and pull requests
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    defaults:
      run:
        shell: C:\cygwin\bin\bash.exe -o igncr '{0}'
    env:
      PATH: "${{ github.workspace }}/verbose-waffle/scripts:$PATH"
    steps:
    - name: Set git to Linux line endings
      run: git config --global core.autocrlf input

    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: true
        token: ${{ secrets.PAT_TOKEN }} # Need a token so I can push to submodule repo

    - name: Set Script Permissions
      run: |
        chmod +x ./verbose-waffle/scripts/*.sh

    - name: Configure git bot account
      run: |
        # Configure git
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
          
    # Need be at the HEAD of the badges repo so we can commit to it later.
    # Otherwise, the submodule would be in detached head state.
    - name: Update Submodule to HEAD
      run: |
        cd ./badges  # Enter the submodule directory
        git checkout master
        git pull origin master
        cd ..

    - name: Cache Cygwin Packages
      id: cache-cygwin
      uses: actions/cache@v4
      with:
        path: C:\cygwin
        key: cygwin-${{ hashfiles('.github/workflows/cygwin.yml') }}

    - name: Install cygwin
      if: steps.cache-cygwin.output.cache-hit != 'true'
      uses: cygwin/cygwin-install-action@master
      with:
        packages: >-
          autoconf automake make libtool flex gperf
          gcc-core
          lzip xz
          gettext-devel libffi-devel libgc-devel
          libgmp-devel libreadline-devel libunistring-devel
          libiconv-devel
          texinfo texinfo-tex texlive

    - name: Configure
      run: |
        export LANG=C.UTF-8
        export TERM=dumb
        export VERBOSE=true
        export TZ=America/Los_Angeles
        export TOP="$(pwd)"
        set -e  # Exit on any error
        mkdir -p "$(pwd)/app" && \
        cd guile && \
        ./autogen.sh && \
          ./configure CFLAGS="-g -O2 -Wall" --disable-lto --prefix="$(pwd)/app"

    - name: Build
      id: build
      run: |
        cd guile && \
        make -j4 V=1
      continue-on-error: true  # Need to continue to make a build failure badge	

    - name: Handle Build Outcome
      run: |
        # Create the badge directory
        export BADGEDIR=./badges/${{ github.repository }}/${{ github.ref_name }}/
        mkdir -p $BADGEDIR

        # Generate badge based on build outcome
        if [ "${{ steps.build.outcome }}" == "success" ]; then
          ./verbose-waffle/scripts/basic.sh 'Cygwin' 'success' 'green' > tmp.svg
          COMMIT_MSG="Update Cygwin badge to success"
        else
          ./verbose-waffle/scripts/basic.sh 'Cygwin' 'failure' 'red' > tmp.svg
          COMMIT_MSG="Update Cygwin badge to failure"
        fi
        ./verbose-waffle/scripts/update_repo.sh $BADGEDIR cygwin.svg tmp.svg $COMMIT_MSG

        # Exit with failure if build failed
        if [ "${{ steps.build.outcome }}" != "success" ]; then
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Unit Tests
      id: check
      run: |
        cd guile && \
        git config --global --add safe.directory /cygdrive/d/a/guile-portability/guile
        make check V=1
      continue-on-error: true
      
    - name: Short report of unit tests
      run: |
        export BADGEDIR=./badges/${{ github.repository }}/${{ github.ref_name }}/
        if [ -f guile/check-guile.log ]; then
          cat guile/check-guile.log | tr -d '\0' | grep -A10 "Totals for this test run" | ./verbose-waffle/scripts/txt2svg.sh > tmp.svg
        else
          echo "Complete test failure" | ./verbose-waffle/scripts/txt2svg.sh > tmp.svg
        fi
        ./verbose-waffle/scripts/update_repo.sh $BADGEDIR cygwin-check.svg tmp.svg "Update Cygwin with check results"

    - name: Archive Test Logs
      if: always() && steps.check.outcome != 'skipped'
      uses: actions/upload-artifact@v4
      with:
        name: Test-Logs-${{ github.sha }}
        path: ./guile/*.log
        if-no-files-found: warn

    - name: Late Quit
      if: ${{ steps.check.outcome != 'success' }}
      run: exit 1
